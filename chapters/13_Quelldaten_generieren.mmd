# Quelldaten generieren #
Die Koordinaten zur Positionierung sowie das Signal zur Dunkel&shy;tastung des Laserstrahls, werden am PC über das SVG-Dateiformat definiert. Im idealfall wird eine &shy; Ausgangsgrafik  und mittels XML-Parser ([_python Skript: svgCoord.py_](#xml-parser)) in eine C-Header-Datei exportiert. Der Ablauf zur Erzeugung neuer Quelldaten ist nachfolgend exemplarisch widergegeben:

<table class="noalter" style="width: 100%; border-spacing: 0px; margin: 0; padding: 0px; border: 0px solid white;">
  <tbody> <figure> <figcaption><center><b><em>GNU Kopf</b> als skalierbare Vektorgrafik</em></center></figcaption>
    <tr>
      <td>
        <a href="https://www.gnu.org/graphics/nu-gnu.svg" target="_blank"> <figure style="width: 300px"> <img src="./pics/gnu_orig.svg" title="&quot;GNU-Kopf&quot; im SVG Format (www.gnu.org)" class="noborder"/> <figcaption>Grafik im SVG Format (www.gnu.org)</figcaption> </figure> </a>
      </td>
      <td>
        <a href="./pics/gnu_bezier.svg" target="_blank"> <figure style="width: 300px"> <img src="./pics/gnu_bezier.svg" title="&quot;GNU-Kopf&quot;&#13;Flächen und Gradienten entfernt&#13;Outline besteht aus Bezier-Kurven" class="noborder" /> <figcaption>Flächen und Gradienten entfernt</figcaption> </figure> </a>
      </td>
    </tr>
    <tr>
      <td colspan="2"> <center>
        <a href="./pics/gnu_flatten_lowres.svg" target="_blank"><figure style="width: 300px"><img src="./pics/gnu_flatten_lowres.svg" title="&quot;GNU-Kopf&quot;&#13;Bezier-Kurven auf lineare Splines reduziert&#13;Inkscape: Extensions => Modify Path => Flatten Bezier..." class="noborder" /><figcaption>Bezier-Kurven auf lineare Splines reduziert</figcaption></a>
      </center> </td>
    </tr>
  </tbody> </figure>
</table>

<table class="noalter noborder" style="display: inline-block;"> 
  <tr> 
    <td colspan="2" style="width: 40%">
      Durch den in Inkscape durch&shy;ge&shy;führten Schritt <em>Bezier-Kurven auf lineare Splines reduzieren</em>, werden alle selektierten Bezier-Kurven durch (mehrere) Geraden interpoliert. Waren z. B. 20 Bezier-Kurven definiert, bleiben im XML-&shy;Baum 20 Pfade mit i. A. unter&shy;schied&shy;lich vielen Pfad&shy;seg&shy;men&shy;ten erhalten.
    </td>
    <td style="width: 20%""> <center><img src="./pics/arrowstd_down.svg"/></center> </td>
    <td colspan="2" style="width: 40%"">
      Das python skript svgCoord.py ordnet alle XML-Tags <code>&#60;path ...&#62;</code> entsprechend der Information, ob die Laser&shy;quelle an oder aus sein soll. Pfade mit Farb&shy;attribut <em>Rot</em> werden später mit aktiver Laser&shy;quelle abge&shy;fahren, das Farb&shy;att&shy;ribut <em>Gelb</em> bedeutet ent&shy;sprechend "Laser&shy;quelle deaktivieren"
    </td>
  </tr>
  <tr>
    <td style="width: 20%"> </td>
    <td colspan="3" style="width: 60%"><center><a href="./pics/gnu_flatten_lowres_mod.svg" target="_blank"><figure><img src="./pics/gnu_flatten_lowres_mod.svg" /><figcaption>GNU Outline, visualisierte Knotenpunkte</figcaption></figure></a></center></td>
    <td style="width: 20%"></td>    
  </tr>
</table>

Gegenüber Rastergrafiken (Pixelgrafik, "Punkt-für-Punk") besitzen Vektorgrafiken den großen Vorteil, dass eine Transformation denkbar einfach durchgeführt werden kann. Soll zum Beispiel die letzte Abbildung _(Visualisierte Knotenpunkte)_ skaliert werden, genügt eine triviale Skalarmultiplikation der Abbildungsmatrix mit einem Skalierungsfaktor $\,\lambda\,$. Genau so einfach kann eine Transformation mittels Drehmatrix $\,M_{Rot}\,$ erzeugt werden. 

$$ \eqlbl{ M_{Rot}(x)=\begin{pmatrix}cos(x) & -sin(x) \\\sin(x) & cos(x) \end{pmatrix}}{eqRotMatrix} $$

Im folgenden C-Listing werden zwei Transformationen der mittels Skript erzeugten Quelldaten (`lseg_t gnu[ ]`) durchgeführt. Die Ausgangsmatrizen werden jeweils in eine Datei exportiert sodass diese in MATLAB über den `load('<pfad>', '-ASCII')`-Befehl einfach wieder importiert und Linien-Segmentweise dargestellt werden können.  

<details markdown=1>
<summary><h4 class="sp"><span class="codehd">gnuTrans.c</span></h4></summary>
@codeimport: "./sources/gnuTrans.c"
</details>

Folgende MATLAB Befehle sind notwendig um die erzeugten `*.mat`-Dateien zu importieren und mittels `line([x1, x2], [y1, y2])` grafisch darzustellen:

```Matlab
%% Import gnu*.mat files and plot all line segments
paths={...
    'res/gnuNorm.mat',...
    'res/gnuScal.mat',...
    'res/gnuRot.mat'};

delete(findall(0,'type','line')); 

for k=1:length(paths)
    m = load(paths{k}, '-ASCII');
    figure(k);
    % Prototyp line(): 
    %   line([x1, x2], [y1, y2],...) NOT: 
    %   line([x1, y1], [x2, y2],...)
    line(m(:,[1 3])',m(:, [2 4])','color','green'); 
    
    set(gca,'DataAspectRatio',[1 1 1],...
        'XLim', [-1 1]*.6, 'YLim', [-1 1]*.6,...
        'GridAlpha',.2);
    
    tmp = strsplit(paths{k}, '/');
    title(tmp{end})
end
```

<center><figure><figcaption><em>In <b>MATLAB</b> visualisierte Matritzen</em></figcaption><a href="./pics/matPlots/gnuNormw.svg" target="_blank"><figure class="box"><img src="./pics/matPlots/gnuNorm.svg" title="Normierte &quot;GNU-Kopf&quot;-Matrix" class="noborder" /><figcaption>Normierte "GNU-Kopf"-Matrix</figcaption></figure></a>
<a href="./pics/matPlots/gnuScalw.svg" target="_blank"><figure class="box"><img src="./pics/matPlots/gnuScal.svg" title="Auf 75% skalierte &quot;GNU-Kopf&quot;-Matrix" class="noborder" /><figcaption>Auf 75% skalierte "GNU-Kopf"-Matrix</figcaption></figure></a>
<a href="./pics/matPlots/gnuRotw.svg" target="_blank"><figure class="box"><img src="./pics/matPlots/gnuRot.svg" title="Um Pi/4 rad gedrehte &quot;GNU-Kopf&quot;-Matrix" class="noborder" /><figcaption>Um $\,\pi/4\,$ rad gedrehte "GNU-Kopf"-Matrix</figcaption></figure></a></figure></center>

ToDo:

- Beam blanking
- 3D-Transformation

