### Warum Cortex-M4? ###
Eine umfangreiche Liste (aller) unter ARM Holdings lizenzierten Mikroarchitekturen kann u.A. auf [wikipedia][wikiMikroarchs] eingesehen werden. Es folgt eine unvollständige grafische Aufbereitung um die grundlegende Unterteilung der ARM-Familien in die Makro-Bereiche _(Classic, Embedded, Application)_ sowie die Klassifizierung der Cortex-Familie in die Architektur-Profile _(Microcontroller, Real-time, Application)_[^fnArmProfiles] aufzuzeigen. 

<a href="./pics/ArmRoadMap3.svg" target="_blank"><center>![](./pics/ArmRoadMap3.png "ARM's @@@@@@@@@@@@"){.scale75 .noborder}</center></a>

Zahlreiche Entwicklungsboards und Plattformen für i.d.R. _Embedded Linux_ Anwendungen erfreuen sich teils großer Beliebtheit (z.B, RaspberryPi). 

|      Name      | Chip-Bezeichnung | Prozessor  | Architektur |    Profil   |  Familie   |        |
|----------------|------------------|------------|-------------|-------------|------------|--------|
| RaspberryPi I  | BCM2835          | ARM1176JZF | ARMv6       |             | ARM11      | 32-Bit |
| RaspberryPi II | BCM2836          | Cortex A7  | ARMv7-A     | Application | Cortex A   | 32-Bit |
| BeagleBoard    | OMAP3530         | Corttex A8 | ARMv7-A     | Application | Cortex A   | 32-Bit |
| Grasshopper    | AT32AP7000       |            | AVR32 RISC  | Application | AVR32 RISC | 32-Bit |
| (...)          |                  |            |             |             |            |        |

Durch entsprechend implementierte Patches für das Linux Kernel (Realtime Preemption patch, --PREEMPT_RT)[^fnLinuxRtPatch] besteht die Möglichkeit, Embedded Linux Betriebssysteme zu entwerfen die den Anforderungen an _"harte Echtzeit-Fähigkeit"_ genügen. Erforderliche Anpassungen Kernel-interner Verriegelungsmechanismen sowie das Einbinden eines generischen Clock-Event-Layers (höher aufgelöstes Takt-System für den Task-Sheduler), werden vor dem Compilieren des Embedded Linux Kernels vorgenommen. 
Aber auch bei absolut determiniertem Interrupt-Handling würde die absolute Reaktionszeit (Interrupt latency) für die regelungstechnischen Aufgaben vermutlich nicht ausreichen. Auf jeden Fall geht der Hardware-Bezug, im Sinne hardwarenaher Programmierung, beim Einsatz von RT-Linux-artigen Betriebssystemen weitestgehend verloren. Die Entwicklung eines eigenen Betriebssystems im Bereich _Application-Processor_ ist u.A. wegen der Speicherverwaltung zu komplex und Zeitaufwendig. Alle Cortex-A werden an einer Speicherverwaltungshardware (MMU) betrieben.

Grundsätzlich gilt der Zusammenhang: <a style="background-color: yellow;"> NACHWEIS??? </a> 

<table>
    <tr>
        <td align="center">Prozessor mit MMU</td>
        <td align="center">$\Rightarrow$</td>
        <td align="center">Embedded OS notwendig</td>
    </tr>
    <tr>
        <td align="center">Embedded OS gefordert</td>
        <td align="center">$\Rightarrow$</td>
        <td align="center">Prozessor mit MMU notwendig</td>
    </tr>
</table>

---

Ob als Hardware-Basis das Architektur-Profile _Microcontroller (Cortex-M Familie)_ oder _Real-time (Cortex-R Familie)_ gewählt werden soll, schien im ersten Moment klar zu sein. Die Cortex-R-Familie ist mit modernen Signalprozessoren (DSP) und Fließkomma-Hardware (FPU) ausgestattet und wurde speziell (trotzdem in Milliarden-Stückzahlen produziert) für kritische Echtzeit-Anwendungen entworfen. 

>Fast response - optimized for high performance, hard real-time applications
The __ARM® Cortex®-R__ real-time processors offer high-performance computing solutions for embedded systems where reliability, high availability, fault tolerance and/or deterministic real-time responses are needed. (...) The Cortex-R series processors provide fast time-to-market through proven technology shipped in billions of products, supported by the vast ARM ecosystem.[^fnCortexR]

Bedenkt man jedoch, was für Aufgaben sonst noch von derartigen Controllern erledigt werden, (Nano-Positionierung in der Festplattentechnik, kritische Bereiche der Medizintechnik, autonome Quadrocopter ...), scheint die Notwendigkeit eines Cortex-R zur Realisierung des geplanten Projekts, nicht mehr unbedingt gegeben zu sein. 

Weitere Argumente, die für den Einsatz eines Cortex-M sprechen:

---

- Cortex-M __ist__ ein Industriestandard (siehe Zitat oder [[Borm:2016, 1-24]][@Borm:2016] resp. [ARM_Entwicklerkonferenz_2012.pdf](http://www.embedded-world.eu/fileadmin/pictures/Events_2012/ARM_2012/CfP/CfP_ARM_Entwicklerkonferenz_2012.pdf))
   
>It is safe to say that the **Cortex-M** has become for the 32-bit world what the 8051
is for the 8-bit – **an industry-standard core* supplied by many vendors, each of which dip the core in their own special sauce to provide differentiation in the market.[^fnWhichCortex] 

- ARM's standardisierte Bibliothek zur Hardware-Abstraktion (CMSIS) beinhaltet bisher nur die **Cortex-M** Familie 

> The **C**ortex **M**icrocontroller **S**oftware **I**nterface **S**tandard (CMSIS) is a vendor-independent hardware abstraction layer for the **Cortex®-M**.[^fnCMSISARM]

- Im Cortex-M4 bekommt die ARMv7-M CPU (neben einer optionalen FPU) Unterstützung von einem DSP mit 
    * **SIMD** (**S**ingle-**I**nstruction-**M**ultiple-**A**ccess; primär für Bild-/Audioverarbeitung) Befehlen
    * **MAC** (**M**ultiply-**AC**cumulate) Erweiterung was sich hervorragend zum erzeugen des Regel 

---

C2000's focus is on supporting control algorithms. The C28x "CPU" is really a DSP, and its instruction set has been extended to handle things like trigonometry and complex numbers. There's also a separate task-based processor called the Control Law Accelerator (CLA) that can run control algorithms independently of the CPU. The ADCs and PWMs support a lot of timing options, too. Performance varies from midrange (Piccolo) to high-end (dual-core Delfino). The big applications here are power converters, power line communication, industrial drives, and motor control



<!-- http://www.emcu.it/CortexFamily/ArmRoadMap.png -->

[^fnWhichCortex]: __SILICON LABS - Which ARM Cortex Core Is the Right?__ https://www.silabs.com/Support%20Documents/TechnicalDocs/Which-ARM-Cortex-Core-Is-Right-for-Your-Application.pdf

[^fnArmProfiles]: __ARM Cortex Architektur-Profile__ http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471i/BCFDFFGA.html

[^fnLinuxRtPatch]: __Harte Echtzeit mit Linux Kernel Patch__ https://rt.wiki.kernel.org/index.php/RT_PREEMPT_HOWTO

[^fnCortexR]: __Cortex-R Family outline__ http://www.arm.com/products/processors/cortex-r

[^fnCMSISARM]: __CMSIS - Cortex Microcontroller Software Interface Standard__ https://www.arm.com/products/processors/cortex-m/cortex-microcontroller-software-interface-standard.php

[@Borm:2016]: #citeBorm "WHZ - ELT130 Vorlesung Version 6.0.pdf"